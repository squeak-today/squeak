/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/audio": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check audio service health
         * @description Check if the audio service is live
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.AudioHealthResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio/stt": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Speech to text
         * @description Convert speech audio to text
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Speech to text request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.SpeechToTextRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.SpeechToTextResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio/translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Translate text
         * @description Translate text from source language to target language
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Translation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.TranslateRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.TranslateResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audio/tts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Text to speech
         * @description Convert text to speech audio
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Text to speech request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.TextToSpeechRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.TextToSpeechResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get news content
         * @description Get news content by ID
         */
        get: {
            parameters: {
                query: {
                    /** @description Content ID */
                    id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetNewsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get news content
         * @description Get news content by ID
         */
        get: {
            parameters: {
                query: {
                    /** @description Language */
                    language: string;
                    /** @description CEFR */
                    cefr: string;
                    /** @description Subject */
                    subject: string;
                    /** @description Page */
                    page: string;
                    /** @description Page size */
                    pagesize: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.NewsItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Organization for Teacher
         * @description Check Organization for Teacher
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.OrganizationResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Organization
         * @description Create Organization. Automatically adds the calling user as a teacher.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Create organization request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.CreateOrganizationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.CreateOrganizationResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join Organization
         * @description Join Organization that has been created by another admin.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Join organization request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.JoinOrganizationRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.JoinOrganizationResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping Payments
         * @description Ping Payments
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.PaymentsResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/payments/cancel-subscription-eop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a Stripe subscription at the end of the period
         * @description Cancel a Stripe subscription at the end of the period
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.CancelSubscriptionResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/payments/create-checkout-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a Stripe checkout session
         * @description Creates a checkout session and redirects to Stripe's payment page
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Redirect to Stripe Checkout */
                303: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Get the user's profile information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetProfileResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upsert user profile
         * @description Create or update the user's profile
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Profile information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.UpsertProfileRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.UpsertProfileResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get today's progress
         * @description Get the user's progress for today
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.TodayProgressResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/progress/increment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Increment questions completed
         * @description Increment the number of questions completed for today
         */
        get: {
            parameters: {
                query: {
                    /** @description Amount to increment by */
                    amount: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.IncrementProgressResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/progress/streak": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get streak information
         * @description Get the user's current streak and completion status
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.StreakResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qna": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get or generate a question
         * @description Get an existing question or generate a new one for the given content
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Question request parameters */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.GetQuestionRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetQuestionResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qna/evaluate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Evaluate an answer
         * @description Evaluate a user's answer to a question
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Answer evaluation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.EvaluateAnswerRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.EvaluateAnswerResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get story page content
         * @description Get story content by ID
         */
        get: {
            parameters: {
                query: {
                    /** @description Content ID */
                    id: string;
                    /** @description Page */
                    page: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetStoryPageResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get story QNA context
         * @description Get story QNA context by ID
         */
        get: {
            parameters: {
                query: {
                    /** @description Content ID */
                    id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetStoryQNAContextResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/story/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get story query
         * @description Get story query by ID
         */
        get: {
            parameters: {
                query: {
                    /** @description Language */
                    language: string;
                    /** @description CEFR */
                    cefr: string;
                    /** @description Subject */
                    subject: string;
                    /** @description Page */
                    page: string;
                    /** @description Page Size */
                    pagesize: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.StoryItem"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check user student status
         * @description Check if the user is a student and get their classroom info
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.StudentStatusResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student/classroom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get classroom info
         * @description Get classroom info for the student
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetStudentClassroomResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/student/classroom/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join classroom
         * @description Join a classroom as a student
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Join classroom request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.JoinClassroomRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.JoinClassroomResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teacher": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check user teacher status
         * @description Check if the user is a teacher
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.TeacherStatusResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teacher/classroom": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get classroom info
         * @description Get classroom info
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.GetClassroomInfoResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teacher/classroom/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept content
         * @description Accept content
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Accept content request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.AcceptContentRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.AcceptContentResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teacher/classroom/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query classroom content
         * @description Query classroom content
         */
        get: {
            parameters: {
                query: {
                    /** @description Language */
                    language: string;
                    /** @description CEFR */
                    cefr: string;
                    /** @description Subject */
                    subject: string;
                    /** @description Page */
                    page: string;
                    /** @description Page size */
                    pagesize: string;
                    /** @description Whitelist status */
                    whitelist: string;
                    /** @description Content type */
                    content_type: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ClassroomContentItem"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teacher/classroom/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create classroom
         * @description Create classroom
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Create classroom request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.CreateClassroomRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.CreateClassroomResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teacher/classroom/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept content
         * @description Accept content
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Reject content request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.RejectContentRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.RejectContentResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process Stripe webhook
         * @description Validates and processes incoming webhook events from Stripe
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.WebhookResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "models.AcceptContentRequest": {
            /** @example 123 */
            content_id?: number;
            /** @example News */
            content_type: string;
        };
        "models.AcceptContentResponse": {
            /** @example Content accepted successfully */
            message: string;
        };
        "models.AudioHealthResponse": {
            /** @example live */
            status: string;
        };
        "models.CancelSubscriptionResponse": {
            /** @example CLASSROOM */
            canceled_plan: string;
            /** @example 2025-03-24T12:00:00Z */
            current_expiration: string;
            /** @example true */
            success: boolean;
        };
        "models.ClassroomContentItem": {
            /** @example B1 */
            cefr_level: string;
            /** @example News */
            content_type: string;
            /** @example 2025-02-26T13:01:13.390612Z */
            created_at: string;
            /** @example 2025-02-26 */
            date_created: string;
            /** @example 2479 */
            id: string;
            /** @example French */
            language: string;
            /** @example 10 */
            pages: number;
            /** @example # L'actualité musicale en bref
             *
             *     ## Un flot de nouveautés... */
            preview_text: string;
            /** @example # L'actualité musicale en bref
             *
             *     ## Un fl... */
            title: string;
            /** @example Music */
            topic: string;
        };
        "models.CreateClassroomRequest": {
            /** @example 10 */
            students_count?: number;
        };
        "models.CreateClassroomResponse": {
            /** @example 123 */
            classroom_id: string;
        };
        "models.CreateOrganizationRequest": Record<string, never>;
        "models.CreateOrganizationResponse": {
            /** @example 123 */
            organization_id: string;
            /** @example 123 */
            teacher_id: string;
        };
        "models.ErrorResponse": {
            /** @example PROFILE_NOT_FOUND */
            code?: string;
            /** @example Something went wrong */
            error: string;
        };
        "models.EvaluateAnswerRequest": {
            /** @example Hello */
            answer: string;
            /** @example B1 */
            cefr: string;
            /** @example Bonjour, comment ça va? */
            content: string;
            /** @example What does 'bonjour' mean? */
            question: string;
        };
        "models.EvaluateAnswerResponse": {
            /** @example PASS */
            evaluation: string;
            /** @example Perfect! */
            explanation: string;
        };
        "models.GetClassroomInfoResponse": {
            /** @example 123 */
            classroom_id: string;
            /** @example 10 */
            students_count?: number;
        };
        "models.GetNewsResponse": {
            /** @example B1 */
            cefr_level: string;
            /** @example Le contenu complet de l'article... */
            content: string;
            /** @example News */
            content_type: string;
            /** @example 2024-02-26 */
            date_created: string;
            dictionary: components["schemas"]["storage.Dictionary"];
            /** @example French */
            language: string;
            /** @example Un résumé des nouvelles musicales... */
            preview_text: string;
            sources: components["schemas"]["storage.Source"][];
            /** @example L'actualité musicale en bref */
            title: string;
            /** @example Music */
            topic: string;
        };
        "models.GetProfileResponse": {
            /** @example 3 */
            daily_questions_goal?: number;
            /** @example [
             *       "[\"NBA\"]"
             *     ] */
            interested_topics: string[];
            /** @example French */
            learning_language: string;
            /** @example B1 */
            skill_level: string;
            /** @example connortbot */
            username: string;
        };
        "models.GetQuestionRequest": {
            /** @example B1 */
            cefr_level: string;
            /** @example News */
            content_type: string;
            /** @example 123 */
            id: string;
            /**
             * @example vocab
             * @enum {string}
             */
            question_type: "vocab" | "understanding";
        };
        "models.GetQuestionResponse": {
            /** @example What does 'bonjour' mean? */
            question: string;
        };
        "models.GetStoryPageResponse": {
            /** @example B1 */
            cefr_level: string;
            /** @example Le contenu complet de l'article... */
            content: string;
            /** @example Story */
            content_type: string;
            /** @example 2024-02-26 */
            date_created: string;
            /** @example French */
            language: string;
            /** @example 10 */
            pages: number;
            /** @example Un résumé des nouvelles musicales... */
            preview_text: string;
            /** @example L'actualité musicale en bref */
            title: string;
            /** @example Music */
            topic: string;
        };
        "models.GetStoryQNAContextResponse": {
            /** @example Le contexte de l'histoire... */
            context: string;
        };
        "models.GetStudentClassroomResponse": {
            /** @example 10 */
            students_count?: number;
            /** @example 789 */
            teacher_id: string;
        };
        "models.IncrementProgressResponse": {
            /** @example 2025-02-26T00:00:00Z */
            date: string;
            /** @example true */
            goal_met: boolean;
            /** @example 5 */
            questions_completed?: number;
            /** @example 123 */
            user_id: string;
        };
        "models.JoinClassroomRequest": {
            /** @example 123 */
            classroom_id: string;
        };
        "models.JoinClassroomResponse": {
            /** @example Student added to classroom successfully */
            message: string;
        };
        "models.JoinOrganizationRequest": {
            /** @example 123 */
            organization_id: string;
        };
        "models.JoinOrganizationResponse": {
            /** @example 123 */
            teacher_id: string;
        };
        "models.NewsItem": {
            /** @example B1 */
            cefr_level: string;
            /** @example 2024-02-26T13:01:13.390612Z */
            created_at: string;
            /** @example 2024-02-26 */
            date_created: string;
            /** @example 123 */
            id: string;
            /** @example French */
            language: string;
            /** @example Un résumé des nouvelles musicales... */
            preview_text: string;
            /** @example L'actualité musicale en bref */
            title: string;
            /** @example Music */
            topic: string;
        };
        "models.OrganizationResponse": {
            /** @example 2025-03-24T12:00:00Z */
            expiration_date?: string;
            /** @example 123 */
            organization_id: string;
            /** @example FREE */
            plan: string;
            /** @example 123 */
            teacher_id: string;
        };
        "models.PaymentsResponse": {
            /** @example true */
            success: boolean;
        };
        "models.RejectContentRequest": {
            /** @example 123 */
            content_id?: number;
            /** @example News */
            content_type: string;
        };
        "models.RejectContentResponse": {
            /** @example Content rejected successfully */
            message: string;
        };
        "models.SpeechToTextRequest": {
            /** @example base64-encoded-audio-content */
            audio_content: string;
            /** @example en-US */
            language_code: string;
        };
        "models.SpeechToTextResponse": {
            /** @example Hello, how are you? */
            transcript: string;
        };
        "models.StoryItem": {
            /** @example B1 */
            cefr_level: string;
            /** @example 2024-02-26T13:01:13.390612Z */
            created_at: string;
            /** @example 2024-02-26 */
            date_created: string;
            /** @example 123 */
            id: string;
            /** @example French */
            language: string;
            /** @example Un résumé des nouvelles musicales... */
            preview_text: string;
            /** @example L'actualité musicale en bref */
            title: string;
            /** @example Music */
            topic: string;
        };
        "models.StreakResponse": {
            /** @example true */
            completed_today: boolean;
            /** @example 7 */
            streak?: number;
        };
        "models.StudentStatusResponse": {
            /** @example 456 */
            classroom_id: string;
            /** @example 123 */
            student_id: string;
        };
        "models.TeacherStatusResponse": {
            /** @example true */
            exists: boolean;
        };
        "models.TextToSpeechRequest": {
            /** @example en-US */
            language_code: string;
            /** @example Hello, how are you? */
            text: string;
            /** @example en-US-Standard-A */
            voice_name: string;
        };
        "models.TextToSpeechResponse": {
            /** @example base64-encoded-audio-content */
            audio_content: string;
        };
        "models.TodayProgressResponse": {
            /** @example 2025-02-26T00:00:00Z */
            date: string;
            /** @example true */
            goal_met: boolean;
            /** @example 5 */
            questions_completed?: number;
            /** @example 123 */
            user_id: string;
        };
        "models.TranslateRequest": {
            /** @example Hello, how are you? */
            sentence: string;
            /** @example en */
            source: string;
            /** @example fr */
            target: string;
        };
        "models.TranslateResponse": {
            /** @example Bonjour, comment allez-vous? */
            sentence?: string;
        };
        "models.UpsertProfileRequest": {
            /** @example 3 */
            daily_questions_goal?: number;
            /** @example [
             *       "[\"NBA\"]"
             *     ] */
            interested_topics: string[];
            /** @example French */
            learning_language: string;
            /** @example B1 */
            skill_level: string;
            /** @example johndoe */
            username: string;
        };
        "models.UpsertProfileResponse": {
            /** @example 123 */
            id?: number;
            /** @example Profile updated successfully */
            message: string;
        };
        "models.WebhookResponse": {
            received?: boolean;
            type?: string;
        };
        "storage.Dictionary": {
            translations?: {
                sentences?: {
                    [key: string]: string;
                };
                words?: {
                    [key: string]: string;
                };
            };
        };
        "storage.Source": {
            content?: string;
            score?: number;
            title?: string;
            url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
