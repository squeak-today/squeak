/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/audio": {
    /**
     * Check audio service health
     * @description Check if the audio service is live
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.AudioHealthResponse"];
          };
        };
      };
    };
  };
  "/audio/stt": {
    /**
     * Speech to text
     * @description Convert speech audio to text
     */
    post: {
      /** @description Speech to text request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.SpeechToTextRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.SpeechToTextResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/audio/translate": {
    /**
     * Translate text
     * @description Translate text from source language to target language
     */
    post: {
      /** @description Translation request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.TranslateRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.TranslateResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/audio/tts": {
    /**
     * Text to speech
     * @description Convert text to speech audio
     */
    post: {
      /** @description Text to speech request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.TextToSpeechRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.TextToSpeechResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/news": {
    /**
     * Get news content
     * @description Get news content by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Content ID */
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetNewsResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/news/query": {
    /**
     * Get news content
     * @description Get news content by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Language */
          language: string;
          /** @description CEFR */
          cefr: string;
          /** @description Subject */
          subject: string;
          /** @description Page */
          page: string;
          /** @description Page size */
          pagesize: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.NewsItem"][];
          };
        };
      };
    };
  };
  "/profile": {
    /**
     * Get user profile
     * @description Get the user's profile information
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetProfileResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/profile/upsert": {
    /**
     * Upsert user profile
     * @description Create or update the user's profile
     */
    post: {
      /** @description Profile information */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.UpsertProfileRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.UpsertProfileResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
        /** @description Conflict */
        409: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/progress": {
    /**
     * Get today's progress
     * @description Get the user's progress for today
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.TodayProgressResponse"];
          };
        };
      };
    };
  };
  "/progress/increment": {
    /**
     * Increment questions completed
     * @description Increment the number of questions completed for today
     */
    get: {
      parameters: {
        query: {
          /** @description Amount to increment by */
          amount: number;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.IncrementProgressResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/progress/streak": {
    /**
     * Get streak information
     * @description Get the user's current streak and completion status
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.StreakResponse"];
          };
        };
      };
    };
  };
  "/qna": {
    /**
     * Get or generate a question
     * @description Get an existing question or generate a new one for the given content
     */
    post: {
      /** @description Question request parameters */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.GetQuestionRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetQuestionResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/qna/evaluate": {
    /**
     * Evaluate an answer
     * @description Evaluate a user's answer to a question
     */
    post: {
      /** @description Answer evaluation request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.EvaluateAnswerRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.EvaluateAnswerResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/story": {
    /**
     * Get story page content
     * @description Get story content by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Content ID */
          id: string;
          /** @description Page */
          page: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetStoryPageResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/story/context": {
    /**
     * Get story QNA context
     * @description Get story QNA context by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Content ID */
          id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetStoryQNAContextResponse"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/story/query": {
    /**
     * Get story query
     * @description Get story query by ID
     */
    get: {
      parameters: {
        query: {
          /** @description Language */
          language: string;
          /** @description CEFR */
          cefr: string;
          /** @description Subject */
          subject: string;
          /** @description Page */
          page: string;
          /** @description Page Size */
          pagesize: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.StoryItem"][];
          };
        };
      };
    };
  };
  "/student": {
    /**
     * Check user student status
     * @description Check if the user is a student and get their classroom info
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.StudentStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/student/classroom": {
    /**
     * Get classroom info
     * @description Get classroom info for the student
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetStudentClassroomResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/student/classroom/join": {
    /**
     * Join classroom
     * @description Join a classroom as a student
     */
    post: {
      /** @description Join classroom request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.JoinClassroomRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.JoinClassroomResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/teacher": {
    /**
     * Check user teacher status
     * @description Check if the user is a teacher
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.TeacherStatusResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/teacher/classroom": {
    /**
     * Get classroom info
     * @description Get classroom info
     */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.GetClassroomInfoResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/teacher/classroom/accept": {
    /**
     * Accept content
     * @description Accept content
     */
    post: {
      /** @description Accept content request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.AcceptContentRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.AcceptContentResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/teacher/classroom/content": {
    /**
     * Query classroom content
     * @description Query classroom content
     */
    get: {
      parameters: {
        query: {
          /** @description Language */
          language: string;
          /** @description CEFR */
          cefr: string;
          /** @description Subject */
          subject: string;
          /** @description Page */
          page: string;
          /** @description Page size */
          pagesize: string;
          /** @description Whitelist status */
          whitelist: string;
          /** @description Content type */
          content_type: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.ClassroomContentItem"][];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/teacher/classroom/create": {
    /**
     * Create classroom
     * @description Create classroom
     */
    post: {
      /** @description Create classroom request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.CreateClassroomRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.CreateClassroomResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/teacher/classroom/reject": {
    /**
     * Accept content
     * @description Accept content
     */
    post: {
      /** @description Reject content request */
      requestBody: {
        content: {
          "application/json": components["schemas"]["models.RejectContentRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.RejectContentResponse"];
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
  "/webhook": {
    /**
     * Process Stripe webhook
     * @description Validates and processes incoming webhook events from Stripe
     */
    post: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["models.WebhookResponse"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["models.ErrorResponse"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "models.AcceptContentRequest": {
      /** @example 123 */
      content_id?: number;
      /** @example News */
      content_type: string;
    };
    "models.AcceptContentResponse": {
      /** @example Content accepted successfully */
      message: string;
    };
    "models.AudioHealthResponse": {
      /** @example live */
      status: string;
    };
    "models.ClassroomContentItem": {
      /** @example B1 */
      cefr_level: string;
      /** @example News */
      content_type: string;
      /** @example 2025-02-26T13:01:13.390612Z */
      created_at: string;
      /** @example 2025-02-26 */
      date_created: string;
      /** @example 2479 */
      id: string;
      /** @example French */
      language: string;
      /** @example 10 */
      pages: number;
      /**
       * @example # L'actualité musicale en bref
       *
       * ## Un flot de nouveautés...
       */
      preview_text: string;
      /**
       * @example # L'actualité musicale en bref
       *
       * ## Un fl...
       */
      title: string;
      /** @example Music */
      topic: string;
    };
    "models.CreateClassroomRequest": {
      /** @example 10 */
      students_count?: number;
    };
    "models.CreateClassroomResponse": {
      /** @example 123 */
      classroom_id: string;
    };
    "models.ErrorResponse": {
      /** @example PROFILE_NOT_FOUND */
      code?: string;
      /** @example Something went wrong */
      error: string;
    };
    "models.EvaluateAnswerRequest": {
      /** @example Hello */
      answer: string;
      /** @example B1 */
      cefr: string;
      /** @example Bonjour, comment ça va? */
      content: string;
      /** @example What does 'bonjour' mean? */
      question: string;
    };
    "models.EvaluateAnswerResponse": {
      /** @example PASS */
      evaluation: string;
      /** @example Perfect! */
      explanation: string;
    };
    "models.GetClassroomInfoResponse": {
      /** @example 123 */
      classroom_id: string;
      /** @example 10 */
      students_count?: number;
    };
    "models.GetNewsResponse": {
      /** @example B1 */
      cefr_level: string;
      /** @example Le contenu complet de l'article... */
      content: string;
      /** @example News */
      content_type: string;
      /** @example 2024-02-26 */
      date_created: string;
      dictionary: components["schemas"]["storage.Dictionary"];
      /** @example French */
      language: string;
      /** @example Un résumé des nouvelles musicales... */
      preview_text: string;
      sources: components["schemas"]["storage.Source"][];
      /** @example L'actualité musicale en bref */
      title: string;
      /** @example Music */
      topic: string;
    };
    "models.GetProfileResponse": {
      /** @example 3 */
      daily_questions_goal?: number;
      /**
       * @example [
       *   "[\"NBA\"]"
       * ]
       */
      interested_topics: string[];
      /** @example French */
      learning_language: string;
      /** @example B1 */
      skill_level: string;
      /** @example connortbot */
      username: string;
    };
    "models.GetQuestionRequest": {
      /** @example B1 */
      cefr_level: string;
      /** @example News */
      content_type: string;
      /** @example 123 */
      id: string;
      /**
       * @example vocab
       * @enum {string}
       */
      question_type: "vocab" | "understanding";
    };
    "models.GetQuestionResponse": {
      /** @example What does 'bonjour' mean? */
      question: string;
    };
    "models.GetStoryPageResponse": {
      /** @example B1 */
      cefr_level: string;
      /** @example Le contenu complet de l'article... */
      content: string;
      /** @example Story */
      content_type: string;
      /** @example 2024-02-26 */
      date_created: string;
      /** @example French */
      language: string;
      /** @example 10 */
      pages: number;
      /** @example Un résumé des nouvelles musicales... */
      preview_text: string;
      /** @example L'actualité musicale en bref */
      title: string;
      /** @example Music */
      topic: string;
    };
    "models.GetStoryQNAContextResponse": {
      /** @example Le contexte de l'histoire... */
      context: string;
    };
    "models.GetStudentClassroomResponse": {
      /** @example 10 */
      students_count?: number;
      /** @example 789 */
      teacher_id: string;
    };
    "models.IncrementProgressResponse": {
      /** @example 2025-02-26T00:00:00Z */
      date: string;
      /** @example true */
      goal_met: boolean;
      /** @example 5 */
      questions_completed?: number;
      /** @example 123 */
      user_id: string;
    };
    "models.JoinClassroomRequest": {
      /** @example 123 */
      classroom_id: string;
    };
    "models.JoinClassroomResponse": {
      /** @example Student added to classroom successfully */
      message: string;
    };
    "models.NewsItem": {
      /** @example B1 */
      cefr_level: string;
      /** @example 2024-02-26T13:01:13.390612Z */
      created_at: string;
      /** @example 2024-02-26 */
      date_created: string;
      /** @example 123 */
      id: string;
      /** @example French */
      language: string;
      /** @example Un résumé des nouvelles musicales... */
      preview_text: string;
      /** @example L'actualité musicale en bref */
      title: string;
      /** @example Music */
      topic: string;
    };
    "models.RejectContentRequest": {
      /** @example 123 */
      content_id?: number;
      /** @example News */
      content_type: string;
    };
    "models.RejectContentResponse": {
      /** @example Content rejected successfully */
      message: string;
    };
    "models.SpeechToTextRequest": {
      /** @example base64-encoded-audio-content */
      audio_content: string;
      /** @example en-US */
      language_code: string;
    };
    "models.SpeechToTextResponse": {
      /** @example Hello, how are you? */
      transcript: string;
    };
    "models.StoryItem": {
      /** @example B1 */
      cefr_level: string;
      /** @example 2024-02-26T13:01:13.390612Z */
      created_at: string;
      /** @example 2024-02-26 */
      date_created: string;
      /** @example 123 */
      id: string;
      /** @example French */
      language: string;
      /** @example Un résumé des nouvelles musicales... */
      preview_text: string;
      /** @example L'actualité musicale en bref */
      title: string;
      /** @example Music */
      topic: string;
    };
    "models.StreakResponse": {
      /** @example true */
      completed_today: boolean;
      /** @example 7 */
      streak?: number;
    };
    "models.StudentStatusResponse": {
      /** @example 456 */
      classroom_id: string;
      /** @example 123 */
      student_id: string;
    };
    "models.TeacherStatusResponse": {
      /** @example true */
      exists: boolean;
    };
    "models.TextToSpeechRequest": {
      /** @example en-US */
      language_code: string;
      /** @example Hello, how are you? */
      text: string;
      /** @example en-US-Standard-A */
      voice_name: string;
    };
    "models.TextToSpeechResponse": {
      /** @example base64-encoded-audio-content */
      audio_content: string;
    };
    "models.TodayProgressResponse": {
      /** @example 2025-02-26T00:00:00Z */
      date: string;
      /** @example true */
      goal_met: boolean;
      /** @example 5 */
      questions_completed?: number;
      /** @example 123 */
      user_id: string;
    };
    "models.TranslateRequest": {
      /** @example Hello, how are you? */
      sentence: string;
      /** @example en */
      source: string;
      /** @example fr */
      target: string;
    };
    "models.TranslateResponse": {
      /** @example Bonjour, comment allez-vous? */
      sentence?: string;
    };
    "models.UpsertProfileRequest": {
      /** @example 3 */
      daily_questions_goal?: number;
      /**
       * @example [
       *   "[\"NBA\"]"
       * ]
       */
      interested_topics: string[];
      /** @example French */
      learning_language: string;
      /** @example B1 */
      skill_level: string;
      /** @example johndoe */
      username: string;
    };
    "models.UpsertProfileResponse": {
      /** @example 123 */
      id?: number;
      /** @example Profile updated successfully */
      message: string;
    };
    "models.WebhookResponse": {
      received?: boolean;
      type?: string;
    };
    "storage.Dictionary": {
      translations?: {
        sentences?: {
          [key: string]: string;
        };
        words?: {
          [key: string]: string;
        };
      };
    };
    "storage.Source": {
      content?: string;
      score?: number;
      title?: string;
      url?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
